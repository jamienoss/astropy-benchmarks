{
    "convolution.ConvolveBenchmarks.time_convolve": {
        "code": "def time_convolve(self):\n    convolve(*self.params, **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveBenchmarks.time_convolve",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveBenchmarks.time_convolve",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveBenchmarks.time_convolve_boundary_extend": {
        "code": "def time_convolve_boundary_extend(self):\n    convolve(*self.params, boundary='extend', **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveBenchmarks.time_convolve_boundary_extend",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveBenchmarks.time_convolve_boundary_extend",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveBenchmarks.time_convolve_boundary_fill": {
        "code": "def time_convolve_boundary_fill(self):\n    convolve(*self.params, boundary='fill', **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveBenchmarks.time_convolve_boundary_fill",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveBenchmarks.time_convolve_boundary_fill",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveBenchmarks.time_convolve_boundary_none": {
        "code": "def time_convolve_boundary_none(self):\n    convolve(*self.params, boundary=None, **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveBenchmarks.time_convolve_boundary_none",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveBenchmarks.time_convolve_boundary_none",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveBenchmarks.time_convolve_boundary_wrap": {
        "code": "def time_convolve_boundary_wrap(self):\n    convolve(*self.params, boundary='wrap', **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveBenchmarks.time_convolve_boundary_wrap",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveBenchmarks.time_convolve_boundary_wrap",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveThreadedBenchmarks.time_convolve": {
        "code": "def time_convolve(self):\n    convolve(*self.params, **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveThreadedBenchmarks.time_convolve",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveThreadedBenchmarks.time_convolve",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_extend": {
        "code": "def time_convolve_boundary_extend(self):\n    convolve(*self.params, boundary='extend', **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_extend",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_extend",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_fill": {
        "code": "def time_convolve_boundary_fill(self):\n    convolve(*self.params, boundary='fill', **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_fill",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_fill",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_none": {
        "code": "def time_convolve_boundary_none(self):\n    convolve(*self.params, boundary=None, **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_none",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_none",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_wrap": {
        "code": "def time_convolve_boundary_wrap(self):\n    convolve(*self.params, boundary='wrap', **self.kargs)\n",
        "goal_time": 2.0,
        "name": "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_wrap",
        "number": 0,
        "param_names": [
            "param1",
            "param2",
            "param3"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "1",
                "2",
                "4",
                "8",
                "16",
                "32",
                "64",
                "128",
                "256",
                "512",
                "1024",
                "2048",
                "4096",
                "8192",
                "16384"
            ],
            [
                "True",
                "False"
            ]
        ],
        "pretty_name": "convolution.ConvolveThreadedBenchmarks.time_convolve_boundary_wrap",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.FrameBenchmarks.time_init_array": {
        "code": "def time_init_array(self):\n    FK5(self.array_ra, self.array_dec)\n",
        "goal_time": 2.0,
        "name": "coordinates.FrameBenchmarks.time_init_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.FrameBenchmarks.time_init_array",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.FrameBenchmarks.time_init_nodata": {
        "code": "def time_init_nodata(self):\n    FK5()\n",
        "goal_time": 2.0,
        "name": "coordinates.FrameBenchmarks.time_init_nodata",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.FrameBenchmarks.time_init_nodata",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.FrameBenchmarks.time_init_scalar": {
        "code": "def time_init_scalar(self):\n    FK5(self.scalar_ra, self.scalar_dec)\n",
        "goal_time": 2.0,
        "name": "coordinates.FrameBenchmarks.time_init_scalar",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.FrameBenchmarks.time_init_scalar",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.SkyCoordBenchmarks.time_icrs_to_galactic_array": {
        "code": "def time_icrs_to_galactic_array(self):\n    self.coord_array_2.transform_to('galactic')\n",
        "goal_time": 2.0,
        "name": "coordinates.SkyCoordBenchmarks.time_icrs_to_galactic_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.SkyCoordBenchmarks.time_icrs_to_galactic_array",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.SkyCoordBenchmarks.time_icrs_to_galactic_scalar": {
        "code": "def time_icrs_to_galactic_scalar(self):\n    self.coord_scalar.transform_to('galactic')\n",
        "goal_time": 2.0,
        "name": "coordinates.SkyCoordBenchmarks.time_icrs_to_galactic_scalar",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.SkyCoordBenchmarks.time_icrs_to_galactic_scalar",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.SkyCoordBenchmarks.time_init_array": {
        "code": "def time_init_array(self):\n    N = int(1e6)\n    lon, lat = np.ones(N), np.ones(N)\n    SkyCoord(lon, lat, unit='deg', frame='icrs')\n",
        "goal_time": 2.0,
        "name": "coordinates.SkyCoordBenchmarks.time_init_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.SkyCoordBenchmarks.time_init_array",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.SkyCoordBenchmarks.time_init_scalar": {
        "code": "def time_init_scalar(self):\n    SkyCoord(1, 2, unit='deg', frame='icrs')\n",
        "goal_time": 2.0,
        "name": "coordinates.SkyCoordBenchmarks.time_init_scalar",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.SkyCoordBenchmarks.time_init_scalar",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.SkyCoordBenchmarks.time_iter_array": {
        "code": "def time_iter_array(self):\n    for c in self.coord_array_1:\n        pass\n",
        "goal_time": 2.0,
        "name": "coordinates.SkyCoordBenchmarks.time_iter_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.SkyCoordBenchmarks.time_iter_array",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.SkyCoordBenchmarks.time_repr_array": {
        "code": "def time_repr_array(self):\n    repr(self.coord_array_1)\n",
        "goal_time": 2.0,
        "name": "coordinates.SkyCoordBenchmarks.time_repr_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.SkyCoordBenchmarks.time_repr_array",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.SkyCoordBenchmarks.time_repr_scalar": {
        "code": "def time_repr_scalar(self):\n    repr(self.coord_scalar)\n",
        "goal_time": 2.0,
        "name": "coordinates.SkyCoordBenchmarks.time_repr_scalar",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.SkyCoordBenchmarks.time_repr_scalar",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.time_angle_array_repr": {
        "code": "def time_angle_array_repr():\n    # Prior to Astropy 3.0, this was very inefficient\n    repr(ANGLES)\n",
        "goal_time": 2.0,
        "name": "coordinates.time_angle_array_repr",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.time_angle_array_repr",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.time_angle_array_repr_latex": {
        "code": "def time_angle_array_repr_latex():\n    # Prior to Astropy 3.0, this was very inefficient\n    ANGLES._repr_latex_()\n",
        "goal_time": 2.0,
        "name": "coordinates.time_angle_array_repr_latex",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.time_angle_array_repr_latex",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.time_angle_array_str": {
        "code": "def time_angle_array_str():\n    # Prior to Astropy 3.0, this was very inefficient\n    str(ANGLES)\n",
        "goal_time": 2.0,
        "name": "coordinates.time_angle_array_str",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.time_angle_array_str",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "coordinates.time_latitude": {
        "code": "def time_latitude():\n    Latitude(3.2, u.degree)\n",
        "goal_time": 2.0,
        "name": "coordinates.time_latitude",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "coordinates.time_latitude",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "cosmology.LambdaCDMBenchmarks.time_age": {
        "code": "def time_age(self, cosmo):\n    self.cosmology.age(self.test_zs)\n",
        "goal_time": 2.0,
        "name": "cosmology.LambdaCDMBenchmarks.time_age",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "LambdaCDM(H0=65 km / (Mpc s), Om0=0.6, Ode0=0.7, Tcmb0=0 K, Neff=3.04, m_nu=None, Ob0=None)",
                "LambdaCDM(H0=65 km / (Mpc s), Om0=0.25, Ode0=0.65, Tcmb0=2.7 K, Neff=3.04, m_nu=[ 0.  0.  0.] eV, Ob0=None)",
                "LambdaCDM(H0=65 km / (Mpc s), Om0=0.6, Ode0=0.7, Tcmb0=2.7 K, Neff=4, m_nu=[ 0.  0.  0.  0.] eV, Ob0=None)",
                "LambdaCDM(H0=65 km / (Mpc s), Om0=0.4, Ode0=0.2, Tcmb0=2.7 K, Neff=3.04, m_nu=[ 0.  0.  0.] eV, Ob0=None)",
                "FlatLambdaCDM(H0=65 km / (Mpc s), Om0=0.25, Tcmb0=0 K, Neff=3.04, m_nu=None, Ob0=None)",
                "FlatLambdaCDM(H0=65 km / (Mpc s), Om0=0.25, Tcmb0=2.7 K, Neff=3.04, m_nu=[ 0.  0.  0.] eV, Ob0=None)",
                "FlatLambdaCDM(H0=65 km / (Mpc s), Om0=0.25, Tcmb0=2.7 K, Neff=3.04, m_nu=[ 0.05  0.1   0.15] eV, Ob0=None)"
            ]
        ],
        "pretty_name": "cosmology.LambdaCDMBenchmarks.time_age",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "cosmology.LambdaCDMBenchmarks.time_lumdist": {
        "code": "def time_lumdist(self, cosmo):\n    self.cosmology.luminosity_distance(self.test_zs)\n",
        "goal_time": 2.0,
        "name": "cosmology.LambdaCDMBenchmarks.time_lumdist",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "LambdaCDM(H0=65 km / (Mpc s), Om0=0.6, Ode0=0.7, Tcmb0=0 K, Neff=3.04, m_nu=None, Ob0=None)",
                "LambdaCDM(H0=65 km / (Mpc s), Om0=0.25, Ode0=0.65, Tcmb0=2.7 K, Neff=3.04, m_nu=[ 0.  0.  0.] eV, Ob0=None)",
                "LambdaCDM(H0=65 km / (Mpc s), Om0=0.6, Ode0=0.7, Tcmb0=2.7 K, Neff=4, m_nu=[ 0.  0.  0.  0.] eV, Ob0=None)",
                "LambdaCDM(H0=65 km / (Mpc s), Om0=0.4, Ode0=0.2, Tcmb0=2.7 K, Neff=3.04, m_nu=[ 0.  0.  0.] eV, Ob0=None)",
                "FlatLambdaCDM(H0=65 km / (Mpc s), Om0=0.25, Tcmb0=0 K, Neff=3.04, m_nu=None, Ob0=None)",
                "FlatLambdaCDM(H0=65 km / (Mpc s), Om0=0.25, Tcmb0=2.7 K, Neff=3.04, m_nu=[ 0.  0.  0.] eV, Ob0=None)",
                "FlatLambdaCDM(H0=65 km / (Mpc s), Om0=0.25, Tcmb0=2.7 K, Neff=3.04, m_nu=[ 0.05  0.1   0.15] eV, Ob0=None)"
            ]
        ],
        "pretty_name": "cosmology.LambdaCDMBenchmarks.time_lumdist",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.core.CoreSuite.time_base_splitter": {
        "code": "def time_base_splitter(self):\n    core.BaseSplitter().process_val(self.line)\n",
        "goal_time": 2.0,
        "name": "io_ascii.core.CoreSuite.time_base_splitter",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.core.CoreSuite.time_base_splitter",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.core.CoreSuite.time_continuation_inputter": {
        "code": "def time_continuation_inputter(self):\n    core.ContinuationLinesInputter().process_lines(self.lines)\n",
        "goal_time": 2.0,
        "name": "io_ascii.core.CoreSuite.time_continuation_inputter",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.core.CoreSuite.time_continuation_inputter",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.core.CoreSuite.time_convert_vals": {
        "code": "def time_convert_vals(self):\n    core.TableOutputter()._convert_vals(self.cols)\n",
        "goal_time": 2.0,
        "name": "io_ascii.core.CoreSuite.time_convert_vals",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.core.CoreSuite.time_convert_vals",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.core.CoreSuite.time_default_splitter_call": {
        "code": "def time_default_splitter_call(self):\n    core.DefaultSplitter()(self.csv_line)\n",
        "goal_time": 2.0,
        "name": "io_ascii.core.CoreSuite.time_default_splitter_call",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.core.CoreSuite.time_default_splitter_call",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.core.CoreSuite.time_default_splitter_join": {
        "code": "def time_default_splitter_join(self):\n    core.DefaultSplitter().join(self.vals)\n",
        "goal_time": 2.0,
        "name": "io_ascii.core.CoreSuite.time_default_splitter_join",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.core.CoreSuite.time_default_splitter_join",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.core.CoreSuite.time_whitespace_splitter": {
        "code": "def time_whitespace_splitter(self):\n    core.WhitespaceSplitter().process_line(self.line)\n",
        "goal_time": 2.0,
        "name": "io_ascii.core.CoreSuite.time_whitespace_splitter",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.core.CoreSuite.time_whitespace_splitter",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.fixedwidth.FixedWidthSuite.time_header": {
        "code": "def time_header(self):\n    self.header.get_cols(self.lines)\n",
        "goal_time": 2.0,
        "name": "io_ascii.fixedwidth.FixedWidthSuite.time_header",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.fixedwidth.FixedWidthSuite.time_header",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.fixedwidth.FixedWidthSuite.time_splitter": {
        "code": "def time_splitter(self):\n    self.splitter(self.lines[1:])\n",
        "goal_time": 2.0,
        "name": "io_ascii.fixedwidth.FixedWidthSuite.time_splitter",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.fixedwidth.FixedWidthSuite.time_splitter",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.ipac.IPACSuite.time_data_str_vals": {
        "code": "def time_data_str_vals(self):\n    self.data.str_vals()\n",
        "goal_time": 2.0,
        "name": "io_ascii.ipac.IPACSuite.time_data_str_vals",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.ipac.IPACSuite.time_data_str_vals",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.ipac.IPACSuite.time_get_cols": {
        "code": "def time_get_cols(self):\n    self.header.get_cols(self.lines)\n",
        "goal_time": 2.0,
        "name": "io_ascii.ipac.IPACSuite.time_get_cols",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.ipac.IPACSuite.time_get_cols",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.ipac.IPACSuite.time_header_str_vals": {
        "code": "def time_header_str_vals(self):\n    self.header.str_vals()\n",
        "goal_time": 2.0,
        "name": "io_ascii.ipac.IPACSuite.time_header_str_vals",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.ipac.IPACSuite.time_header_str_vals",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.ipac.IPACSuite.time_splitter": {
        "code": "def time_splitter(self):\n    self.splitter.join(self.vals, self.widths)\n",
        "goal_time": 2.0,
        "name": "io_ascii.ipac.IPACSuite.time_splitter",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.ipac.IPACSuite.time_splitter",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.AastexFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.AastexFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.AastexFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.AastexFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.AastexFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.AastexFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.AastexInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.AastexInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.AastexInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.AastexInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.AastexInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.AastexInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.AastexString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.AastexString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.AastexString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.AastexString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.AastexString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.AastexString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.BasicFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.BasicFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.BasicFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.BasicFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.BasicFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.BasicFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.BasicInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.BasicInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.BasicInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.BasicInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.BasicInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.BasicInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.BasicString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.BasicString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.BasicString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.BasicString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.BasicString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.BasicString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CommentedHeaderFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CommentedHeaderFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CommentedHeaderFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CommentedHeaderFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CommentedHeaderFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CommentedHeaderFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CommentedHeaderInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CommentedHeaderInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CommentedHeaderInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CommentedHeaderInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CommentedHeaderInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CommentedHeaderInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CommentedHeaderString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CommentedHeaderString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CommentedHeaderString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CommentedHeaderString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CommentedHeaderString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CommentedHeaderString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CsvFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CsvFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CsvFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CsvFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CsvFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CsvFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CsvInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CsvInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CsvInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CsvInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CsvInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CsvInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CsvString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CsvString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CsvString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.CsvString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.CsvString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.CsvString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthNoHeaderFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthNoHeaderFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthNoHeaderFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthNoHeaderFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthNoHeaderFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthNoHeaderFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthNoHeaderInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthNoHeaderInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthNoHeaderInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthNoHeaderInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthNoHeaderInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthNoHeaderInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthNoHeaderString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthNoHeaderString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthNoHeaderString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthNoHeaderString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthNoHeaderString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthNoHeaderString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthTwoLineFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthTwoLineFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthTwoLineFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthTwoLineFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthTwoLineFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthTwoLineFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthTwoLineInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthTwoLineInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthTwoLineInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthTwoLineInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthTwoLineInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthTwoLineInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthTwoLineString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthTwoLineString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthTwoLineString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.FixedWidthTwoLineString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.FixedWidthTwoLineString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.FixedWidthTwoLineString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.IpacFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.IpacFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.IpacFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.IpacFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.IpacFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.IpacFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.IpacInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.IpacInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.IpacInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.IpacInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.IpacInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.IpacInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.IpacString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.IpacString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.IpacString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.IpacString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.IpacString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.IpacString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.LatexFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.LatexFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.LatexFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.LatexFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.LatexFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.LatexFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.LatexInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.LatexInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.LatexInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.LatexInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.LatexInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.LatexInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.LatexString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.LatexString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.LatexString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.LatexString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.LatexString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.LatexString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.NoHeaderFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.NoHeaderFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.NoHeaderFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.NoHeaderFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.NoHeaderFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.NoHeaderFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.NoHeaderInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.NoHeaderInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.NoHeaderInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.NoHeaderInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.NoHeaderInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.NoHeaderInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.NoHeaderString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.NoHeaderString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.NoHeaderString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.NoHeaderString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.NoHeaderString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.NoHeaderString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.RdbFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.RdbFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.RdbFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.RdbFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.RdbFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.RdbFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.RdbInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.RdbInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.RdbInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.RdbInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.RdbInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.RdbInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.RdbString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.RdbString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.RdbString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.RdbString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.RdbString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.RdbString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.SextractorFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.SextractorFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.SextractorFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.SextractorInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.SextractorInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.SextractorInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.SextractorString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.SextractorString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.SextractorString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.TabFloat.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.TabFloat.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.TabFloat.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.TabFloat.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.TabFloat.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.TabFloat.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.TabInt.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.TabInt.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.TabInt.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.TabInt.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.TabInt.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.TabInt.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.TabString.time_read": {
        "code": "def read(self):\n    return ascii.read(BytesIO(self.data), format=self.file_format, guess=False)\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.TabString.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.TabString.time_read",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.main.TabString.time_write": {
        "code": "def write(self):\n    ascii.write(self.table, self.output, Writer=self.writers[self.file_format])\n",
        "goal_time": 2.0,
        "name": "io_ascii.main.TabString.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.main.TabString.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.rdb.RDBSuite.time_get_cols": {
        "code": "def time_get_cols(self):\n    self.header.get_cols(self.lines)\n",
        "goal_time": 2.0,
        "name": "io_ascii.rdb.RDBSuite.time_get_cols",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.rdb.RDBSuite.time_get_cols",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.sextractor.SExtractorSuite.time_header": {
        "code": "def time_header(self):\n    self.header.get_cols(self.lines)\n",
        "goal_time": 2.0,
        "name": "io_ascii.sextractor.SExtractorSuite.time_header",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.sextractor.SExtractorSuite.time_header",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.table.TableSuite.mem_table_init": {
        "code": "def mem_table_init(self):\n    return table.Table(self.lst)\n",
        "name": "io_ascii.table.TableSuite.mem_table_init",
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.table.TableSuite.mem_table_init",
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes"
    },
    "io_ascii.table.TableSuite.mem_table_outputter": {
        "code": "def mem_table_outputter(self):\n    return self.outputter(self.cols, {'table': {}})\n",
        "name": "io_ascii.table.TableSuite.mem_table_outputter",
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.table.TableSuite.mem_table_outputter",
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes"
    },
    "io_ascii.table.TableSuite.time_str_vals_float": {
        "code": "def time_str_vals_float(self):\n    self.table_cols[1].iter_str_vals()\n",
        "goal_time": 2.0,
        "name": "io_ascii.table.TableSuite.time_str_vals_float",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.table.TableSuite.time_str_vals_float",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.table.TableSuite.time_str_vals_int": {
        "code": "def time_str_vals_int(self):\n    self.table_cols[0].iter_str_vals()\n",
        "goal_time": 2.0,
        "name": "io_ascii.table.TableSuite.time_str_vals_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.table.TableSuite.time_str_vals_int",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.table.TableSuite.time_str_vals_str": {
        "code": "def time_str_vals_str(self):\n    self.table_cols[2].iter_str_vals()\n",
        "goal_time": 2.0,
        "name": "io_ascii.table.TableSuite.time_str_vals_str",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.table.TableSuite.time_str_vals_str",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.table.TableSuite.time_table_init_from_list": {
        "code": "def time_table_init_from_list(self):\n    self.table._init_from_list(self.table_cols, ['1', '2', '3'],\n                               [None, None, None], 3, True)\n",
        "goal_time": 2.0,
        "name": "io_ascii.table.TableSuite.time_table_init_from_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.table.TableSuite.time_table_init_from_list",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_ascii.table.TableSuite.time_table_outputter": {
        "code": "def time_table_outputter(self):\n    self.outputter(self.cols, {'table': {}})\n",
        "goal_time": 2.0,
        "name": "io_ascii.table.TableSuite.time_table_outputter",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_ascii.table.TableSuite.time_table_outputter",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_fits.FITSBinTableHDU.time_from_columns_bytes": {
        "code": "def time_from_columns_bytes(self):\n    x = np.repeat(b'a', 2_000_000)\n    array = np.array(x, dtype=[('col', 'S1')])\n    BinTableHDU.from_columns(array)\n",
        "goal_time": 2.0,
        "name": "io_fits.FITSBinTableHDU.time_from_columns_bytes",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_fits.FITSBinTableHDU.time_from_columns_bytes",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_fits.FITSHighLevelTableBenchmarks.time_read_nommap": {
        "code": "def time_read_nommap(self):\n    self.table_bytes.seek(0)\n    try:\n        Table.read(self.table_bytes, format='fits', memmap=False)\n    except TypeError:\n        Table.read(self.table_bytes, format='fits')\n",
        "goal_time": 2.0,
        "name": "io_fits.FITSHighLevelTableBenchmarks.time_read_nommap",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_fits.FITSHighLevelTableBenchmarks.time_read_nommap",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "io_fits.FITSHighLevelTableBenchmarks.time_write": {
        "code": "def time_write(self):\n    N = 1_000_000\n    table_bytes = BytesIO()\n    t = Table()\n    t['floats'] = np.random.random(N)\n    t['ints'] = np.random.randint(0, 100, N)\n    t['strings'] = b'some strings'\n    t['booleans'] = t['floats'] > 0.5\n    t.write(table_bytes, format='fits')\n",
        "goal_time": 2.0,
        "name": "io_fits.FITSHighLevelTableBenchmarks.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "io_fits.FITSHighLevelTableBenchmarks.time_write",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_add_column": {
        "code": "def time_add_column(self):\n    self.table['e'] = self.extra_column\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_add_column",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_add_column",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_add_row": {
        "code": "def time_add_row(self):\n    self.table.add_row(self.extra_row)\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_add_row",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_add_row",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_aggregate": {
        "code": "def time_aggregate(self):\n    # Test aggregate with a function that supports reduceat\n    self.table_grouped.groups.aggregate(np.sum)\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_aggregate",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_aggregate",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_aggregate_noreduceat": {
        "code": "def time_aggregate_noreduceat(self):\n    # Test aggregate with a function that doesn't support reduceat\n    self.table_grouped.groups.aggregate(lambda x: np.sum(x))\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_aggregate_noreduceat",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_aggregate_noreduceat",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_column_get": {
        "code": "def time_column_get(self):\n    self.table['c']\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_column_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_column_get",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_column_make_bool_mask": {
        "code": "def time_column_make_bool_mask(self):\n    self.table['a'] > 0.6\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_column_make_bool_mask",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_column_make_bool_mask",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_column_set": {
        "code": "def time_column_set(self):\n    self.table['a'] = 0.\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_column_set",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_column_set",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_column_set_all": {
        "code": "def time_column_set_all(self):\n    self.table['b'][:] = True\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_column_set_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_column_set_all",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_column_set_row_subset": {
        "code": "def time_column_set_row_subset(self):\n    self.table['b'][self.bool_mask] = True\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_column_set_row_subset",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_column_set_row_subset",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_column_set_row_subset_int": {
        "code": "def time_column_set_row_subset_int(self):\n    self.table['b'][self.row_indices] = True\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_column_set_row_subset_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_column_set_row_subset_int",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_column_slice_bool": {
        "code": "def time_column_slice_bool(self):\n    col_subset = self.table['a'][self.bool_mask]\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_column_slice_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_column_slice_bool",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_column_slice_int": {
        "code": "def time_column_slice_int(self):\n    col_subset = self.table['a'][self.row_indices]\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_column_slice_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_column_slice_int",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_copy_column": {
        "code": "def time_copy_column(self):\n    self.table['a'].copy()\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_copy_column",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_copy_column",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_copy_table": {
        "code": "def time_copy_table(self):\n    self.table.copy()\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_copy_table",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_copy_table",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_group": {
        "code": "def time_group(self):\n    self.table.group_by('d')\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_group",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_group",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_hstack": {
        "code": "def time_hstack(self):\n    hstack([self.table, self.other_table_2])\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_hstack",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_hstack",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_init_from_np_array_copy": {
        "code": "def time_init_from_np_array_copy(self):\n    Table(self.np_table, copy=True)\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_init_from_np_array_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_init_from_np_array_copy",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_init_from_np_array_no_copy": {
        "code": "def time_init_from_np_array_no_copy(self):\n    Table(self.np_table, copy=False)\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_init_from_np_array_no_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_init_from_np_array_no_copy",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_item_get_colfirst": {
        "code": "def time_item_get_colfirst(self):\n    self.table['b'][300]\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_item_get_colfirst",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_item_get_colfirst",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_item_get_rowfirst": {
        "code": "def time_item_get_rowfirst(self):\n    self.table[300]['b']\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_item_get_rowfirst",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_item_get_rowfirst",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_iter_row": {
        "code": "def time_iter_row(self):\n    for row in self.table:\n        pass\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_iter_row",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_iter_row",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_join_inner": {
        "code": "def time_join_inner(self):\n    join(self.table, self.other_table, keys=\"i\", join_type='inner')\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_join_inner",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_join_inner",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_join_outer": {
        "code": "def time_join_outer(self):\n    join(self.table, self.other_table, keys=\"i\", join_type='outer')\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_join_outer",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_join_outer",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_mask_column": {
        "code": "def time_mask_column(self):\n    self.table['a'].mask = self.bool_mask\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_mask_column",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_mask_column",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_multi_column_get": {
        "code": "def time_multi_column_get(self):\n    self.table[('a','c')]\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_multi_column_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_multi_column_get",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_read_rows": {
        "code": "def time_read_rows(self):\n    for row in self.table:\n        tuple(row)\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_read_rows",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_read_rows",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_remove_column": {
        "code": "def time_remove_column(self):\n    self.table.remove_column('a')\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_remove_column",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_remove_column",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_remove_row": {
        "code": "def time_remove_row(self):\n    self.table.remove_row(6)\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_remove_row",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_remove_row",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_remove_rows": {
        "code": "def time_remove_rows(self):\n    self.table.remove_rows(self.row_indices)\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_remove_rows",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_remove_rows",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_row_get": {
        "code": "def time_row_get(self):\n    self.table[300]\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_row_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_row_get",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_sort": {
        "code": "def time_sort(self):\n    self.table.sort('a')\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_sort",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_sort",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_table_slice_bool": {
        "code": "def time_table_slice_bool(self):\n    table_subset = self.table[self.bool_mask]\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_table_slice_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_table_slice_bool",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_table_slice_int": {
        "code": "def time_table_slice_int(self):\n    table_subset = self.table[self.row_indices]\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_table_slice_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_table_slice_int",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeMaskedTable.time_vstack": {
        "code": "def time_vstack(self):\n    vstack([self.table, self.table])\n",
        "goal_time": 2.0,
        "name": "table.TimeMaskedTable.time_vstack",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeMaskedTable.time_vstack",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_add_column": {
        "code": "def time_add_column(self):\n    self.table['e'] = self.extra_column\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_add_column",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_add_column",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_add_row": {
        "code": "def time_add_row(self):\n    self.table.add_row(self.extra_row)\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_add_row",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_add_row",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_aggregate": {
        "code": "def time_aggregate(self):\n    # Test aggregate with a function that supports reduceat\n    self.table_grouped.groups.aggregate(np.sum)\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_aggregate",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_aggregate",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_aggregate_noreduceat": {
        "code": "def time_aggregate_noreduceat(self):\n    # Test aggregate with a function that doesn't support reduceat\n    self.table_grouped.groups.aggregate(lambda x: np.sum(x))\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_aggregate_noreduceat",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_aggregate_noreduceat",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_column_get": {
        "code": "def time_column_get(self):\n    self.table['c']\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_column_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_column_get",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_column_make_bool_mask": {
        "code": "def time_column_make_bool_mask(self):\n    self.table['a'] > 0.6\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_column_make_bool_mask",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_column_make_bool_mask",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_column_set": {
        "code": "def time_column_set(self):\n    self.table['a'] = 0.\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_column_set",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_column_set",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_column_set_all": {
        "code": "def time_column_set_all(self):\n    self.table['b'][:] = True\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_column_set_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_column_set_all",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_column_set_row_subset": {
        "code": "def time_column_set_row_subset(self):\n    self.table['b'][self.bool_mask] = True\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_column_set_row_subset",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_column_set_row_subset",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_column_set_row_subset_int": {
        "code": "def time_column_set_row_subset_int(self):\n    self.table['b'][self.row_indices] = True\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_column_set_row_subset_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_column_set_row_subset_int",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_column_slice_bool": {
        "code": "def time_column_slice_bool(self):\n    col_subset = self.table['a'][self.bool_mask]\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_column_slice_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_column_slice_bool",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_column_slice_int": {
        "code": "def time_column_slice_int(self):\n    col_subset = self.table['a'][self.row_indices]\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_column_slice_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_column_slice_int",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_copy_column": {
        "code": "def time_copy_column(self):\n    self.table['a'].copy()\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_copy_column",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_copy_column",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_copy_table": {
        "code": "def time_copy_table(self):\n    self.table.copy()\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_copy_table",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_copy_table",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_group": {
        "code": "def time_group(self):\n    self.table.group_by('d')\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_group",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_group",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_hstack": {
        "code": "def time_hstack(self):\n    hstack([self.table, self.other_table_2])\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_hstack",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_hstack",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_init_from_np_array_copy": {
        "code": "def time_init_from_np_array_copy(self):\n    Table(self.np_table, copy=True)\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_init_from_np_array_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_init_from_np_array_copy",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_init_from_np_array_no_copy": {
        "code": "def time_init_from_np_array_no_copy(self):\n    Table(self.np_table, copy=False)\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_init_from_np_array_no_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_init_from_np_array_no_copy",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_item_get_colfirst": {
        "code": "def time_item_get_colfirst(self):\n    self.table['b'][300]\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_item_get_colfirst",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_item_get_colfirst",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_item_get_rowfirst": {
        "code": "def time_item_get_rowfirst(self):\n    self.table[300]['b']\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_item_get_rowfirst",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_item_get_rowfirst",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_iter_row": {
        "code": "def time_iter_row(self):\n    for row in self.table:\n        pass\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_iter_row",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_iter_row",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_join_inner": {
        "code": "def time_join_inner(self):\n    join(self.table, self.other_table, keys=\"i\", join_type='inner')\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_join_inner",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_join_inner",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_join_outer": {
        "code": "def time_join_outer(self):\n    join(self.table, self.other_table, keys=\"i\", join_type='outer')\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_join_outer",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_join_outer",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_multi_column_get": {
        "code": "def time_multi_column_get(self):\n    self.table[('a','c')]\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_multi_column_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_multi_column_get",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_read_rows": {
        "code": "def time_read_rows(self):\n    for row in self.table:\n        tuple(row)\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_read_rows",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_read_rows",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_remove_column": {
        "code": "def time_remove_column(self):\n    self.table.remove_column('a')\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_remove_column",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_remove_column",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_remove_row": {
        "code": "def time_remove_row(self):\n    self.table.remove_row(6)\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_remove_row",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_remove_row",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_remove_rows": {
        "code": "def time_remove_rows(self):\n    self.table.remove_rows(self.row_indices)\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_remove_rows",
        "number": 1,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_remove_rows",
        "repeat": 1,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_row_get": {
        "code": "def time_row_get(self):\n    self.table[300]\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_row_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_row_get",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_sort": {
        "code": "def time_sort(self):\n    self.table.sort('a')\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_sort",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_sort",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_table_slice_bool": {
        "code": "def time_table_slice_bool(self):\n    table_subset = self.table[self.bool_mask]\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_table_slice_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_table_slice_bool",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_table_slice_int": {
        "code": "def time_table_slice_int(self):\n    table_subset = self.table[self.row_indices]\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_table_slice_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_table_slice_int",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "table.TimeTable.time_vstack": {
        "code": "def time_vstack(self):\n    vstack([self.table, self.table])\n",
        "goal_time": 2.0,
        "name": "table.TimeTable.time_vstack",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "table.TimeTable.time_vstack",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.mem_unit": {
        "code": "def mem_unit():\n    return u.erg\n",
        "name": "units.mem_unit",
        "param_names": [],
        "params": [],
        "pretty_name": "units.mem_unit",
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes"
    },
    "units.time_compose_complex": {
        "code": "def time_compose_complex():\n    # Composing a complex unit can be very inefficient\n    (u.kg / u.s ** 3 * u.au ** 2.5 / u.yr ** 0.5 / u.sr ** 2).compose()\n",
        "goal_time": 2.0,
        "name": "units.time_compose_complex",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_compose_complex",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_compose_to_bases": {
        "code": "def time_compose_to_bases():\n    x = copy.copy(u.Ry)\n    x.cgs\n",
        "goal_time": 2.0,
        "name": "units.time_compose_to_bases",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_compose_to_bases",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_array_conversion": {
        "code": "def time_quantity_array_conversion():\n    (a * u.m / u.s).to(u.km / u.hour)\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_array_conversion",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_array_conversion",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_creation": {
        "code": "def time_quantity_creation():\n    u.Quantity(a, u.m)\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_creation",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_creation",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_creation_nocopy": {
        "code": "def time_quantity_creation_nocopy():\n    u.Quantity(a, u.m, copy=False)\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_creation_nocopy",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_creation_nocopy",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_init_array": {
        "code": "def time_quantity_init_array():\n    a * u.m / u.s\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_init_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_init_array",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_init_scalar": {
        "code": "def time_quantity_init_scalar():\n    3. * u.m / u.s\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_init_scalar",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_init_scalar",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_scalar_conversion": {
        "code": "def time_quantity_scalar_conversion():\n    (3. * u.m / u.s).to(u.km / u.hour)\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_scalar_conversion",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_scalar_conversion",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_times_quantity": {
        "code": "def time_quantity_times_quantity():\n    q1 * q0\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_times_quantity",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_times_quantity",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_times_unit": {
        "code": "def time_quantity_times_unit():\n    q1 * u.m\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_times_unit",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_times_unit",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_ufunc_sin": {
        "code": "def time_quantity_ufunc_sin():\n    np.sin(q2)\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_ufunc_sin",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_ufunc_sin",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_quantity_view": {
        "code": "def time_quantity_view():\n    q1.view(u.Quantity)\n",
        "goal_time": 2.0,
        "name": "units.time_quantity_view",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_quantity_view",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_simple_unit_parse": {
        "code": "def time_simple_unit_parse():\n    u.Unit('1 d')\n",
        "goal_time": 2.0,
        "name": "units.time_simple_unit_parse",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_simple_unit_parse",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_unit_compose": {
        "code": "def time_unit_compose():\n    u.Ry.compose()\n",
        "goal_time": 2.0,
        "name": "units.time_unit_compose",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_unit_compose",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_unit_parse": {
        "code": "def time_unit_parse():\n    u.Unit('1e-07 kg m2 / s2')\n",
        "goal_time": 2.0,
        "name": "units.time_unit_parse",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_unit_parse",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_unit_to": {
        "code": "def time_unit_to():\n    u.m.to(u.pc)\n",
        "goal_time": 2.0,
        "name": "units.time_unit_to",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_unit_to",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "units.time_very_simple_unit_parse": {
        "code": "def time_very_simple_unit_parse():\n    u.Unit('d')\n",
        "goal_time": 2.0,
        "name": "units.time_very_simple_unit_parse",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "units.time_very_simple_unit_parse",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "version": 1,
    "visualization.wcsaxes.time_basic_plot": {
        "code": "def time_basic_plot():\n\n    fig = Figure()\n    canvas = FigureCanvas(fig)\n\n    ax = WCSAxes(fig, [0.15, 0.15, 0.7, 0.7], wcs=MSX_WCS)\n    fig.add_axes(ax)\n\n    ax.set_xlim(-0.5, 148.5)\n    ax.set_ylim(-0.5, 148.5)\n\n    canvas.draw()\n",
        "goal_time": 2.0,
        "name": "visualization.wcsaxes.time_basic_plot",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "visualization.wcsaxes.time_basic_plot",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "visualization.wcsaxes.time_basic_plot_with_grid": {
        "code": "def time_basic_plot_with_grid():\n\n    fig = Figure()\n    canvas = FigureCanvas(fig)\n\n    ax = WCSAxes(fig, [0.15, 0.15, 0.7, 0.7], wcs=MSX_WCS)\n    fig.add_axes(ax)\n\n    ax.grid(color='red', alpha=0.5, linestyle='solid')\n\n    ax.set_xlim(-0.5, 148.5)\n    ax.set_ylim(-0.5, 148.5)\n\n    canvas.draw()\n",
        "goal_time": 2.0,
        "name": "visualization.wcsaxes.time_basic_plot_with_grid",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "visualization.wcsaxes.time_basic_plot_with_grid",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "visualization.wcsaxes.time_basic_plot_with_grid_and_overlay": {
        "code": "def time_basic_plot_with_grid_and_overlay():\n\n    fig = Figure()\n    canvas = FigureCanvas(fig)\n\n    ax = WCSAxes(fig, [0.15, 0.15, 0.7, 0.7], wcs=MSX_WCS)\n    fig.add_axes(ax)\n\n    ax.grid(color='red', alpha=0.5, linestyle='solid')\n\n    ax.set_xlim(-0.5, 148.5)\n    ax.set_ylim(-0.5, 148.5)\n\n    overlay = ax.get_coords_overlay('fk5')\n    overlay.grid(color='purple', ls='dotted')\n\n    canvas.draw()\n",
        "goal_time": 2.0,
        "name": "visualization.wcsaxes.time_basic_plot_with_grid_and_overlay",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "visualization.wcsaxes.time_basic_plot_with_grid_and_overlay",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    }
}